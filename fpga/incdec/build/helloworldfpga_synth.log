
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)


-- Parsing `/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v' to AST representation.
Generating RTLIL representation for module `\helloworldfpga'.
Warning: wire '\a' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36.1-36.28.
Warning: wire '\b' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:37.1-37.26.
Warning: wire '\c' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:38.1-38.15.
Warning: wire '\d' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:39.1-39.39.
Warning: wire '\e' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40.1-40.75.
Warning: wire '\f' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41.1-41.51.
Warning: wire '\g' is assigned in a block at /home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:42.1-42.40.
Successfully finished Verilog frontend.

-- Running command `tcl /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   0 design levels: helloworldfpga      
Automatically selected helloworldfpga as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.3.3. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$257 in module MULT.
Marked 2 switch rules as full_case in process $proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239 in module Q_FRAG.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 12 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$240'.
  Set init value: \QZ = 1'0

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.
Found async reset \QRT in `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$257'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$240'.
Creating decoders for process `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\helloworldfpga.\A' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\B' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\C' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\D' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\a' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\b' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\c' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\d' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\e' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\f' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
No latch inferred for signal `\helloworldfpga.\g' from process `\helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$257'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1108' with positive edge clock and multiple level-sensitive resets.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$257'.
Removing empty process `MULT.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$257'.
Removing empty process `Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$240'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.
Removing empty process `Q_FRAG.$proc$/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$239'.
Removing empty process `helloworldfpga.$proc$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:23$1'.
Cleaned up 5 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 22 unused wires.

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 146 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 146 unused wires.

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.13. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module helloworldfpga:
  created 0 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$10
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$11
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$2
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$3
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$5
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$8
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$15
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$16
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$17
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$19
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$21
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$23
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$29
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$33
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$35
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$41
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$42
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$48
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$68
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$70
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$72
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$74
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$79
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$81
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$85
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$87
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$100
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$101
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$105
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$107
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:37$113
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:37$118
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$170
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$171
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$172
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$175
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$177
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$178
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$182
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$189
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$191
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$197
cell type $and$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:42$210
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$4
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$6
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$7
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$9
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$102
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$104
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$106
cell type $logic_not$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$97
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:27$12
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$24
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$30
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:28$36
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$49
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$55
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:29$61
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$75
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$82
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$88
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:30$95
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:36$108
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:37$119
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:39$143
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$155
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$162
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$168
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$173
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:40$179
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$192
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$198
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:41$203
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:42$217
cell type $or$/home/deekshitha/qorc-sdk/fpga-examples/incdec/incdec.v:42$222

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:239: Warning: Identifier `\GND' is implicitly declared.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:240: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:539: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:825: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:999: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_brams_map.v:1251: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.9. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module helloworldfpga..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module helloworldfpga:

4.36. Executing TECHMAP pass (map to technology primitives).

4.36.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.36.2. Continuing TECHMAP pass.
No more expansions possible.

4.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\helloworldfpga' to `<abc-temp-dir>/input.blif'..
Extracted 75 gates and 79 wires to a netlist network with 4 inputs and 7 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + read_lut <yosys-exe-dir>/../share/yosys/quicklogic/pp3_lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + sweep 
ABC: + eliminate 
ABC: + if 
ABC: The network was strashed and balanced before FPGA mapping.
ABC: + mfs 
ABC: + lutpack 
ABC: + dress 
ABC: Total number of equiv classes                =       8.
ABC: Participating nodes from both networks       =      16.
ABC: Participating nodes from the first network   =       7. (  87.50 % of nodes)
ABC: Participating nodes from the second network  =       9. ( 112.50 % of nodes)
ABC: Node pairs (any polarity)                    =       7. (  87.50 % of names can be moved)
ABC: Node pairs (same polarity)                   =       7. (  87.50 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        7
ABC RESULTS:        internal signals:       68
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7
Removing temp directory.

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 79 unused wires.

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.42.2. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.42.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010100010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111001000001 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 14 unused wires.

4.43. Executing Quicklogic_EQN pass (calculate equations for luts).

4.44. Updated 7 of LUT* elements with equation.

4.45. Executing AUTONAME pass.
Renamed 7 objects in module helloworldfpga (2 iterations).

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.46.2. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.47. Printing statistics.

=== helloworldfpga ===

   Number of wires:                 11
   Number of wire bits:             11
   Number of public wires:          11
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     LUT3                            1
     LUT4                            6

4.48. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

4.49. Executing CLKBUFMAP pass (inserting global clock buffers).

4.50. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port helloworldfpga.W using inpad.
Mapping port helloworldfpga.X using inpad.
Mapping port helloworldfpga.Y using inpad.
Mapping port helloworldfpga.Z using inpad.
Mapping port helloworldfpga.a using outpad.
Mapping port helloworldfpga.b using outpad.
Mapping port helloworldfpga.c using outpad.
Mapping port helloworldfpga.d using outpad.
Mapping port helloworldfpga.e using outpad.
Mapping port helloworldfpga.f using outpad.
Mapping port helloworldfpga.g using outpad.

4.51. Executing SPLITNETS pass (splitting up multi-bit signals).

4.52. Executing SETUNDEF pass (replace undef values with defined constants).

4.53. Executing HILOMAP pass (mapping to constant drivers).

4.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.55. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

5. Printing statistics.

=== helloworldfpga ===

   Number of wires:                 22
   Number of wire bits:             22
   Number of public wires:          11
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     LUT3                            1
     LUT4                            6
     inpad                           4
     outpad                          7

Loading PCF from '/home/deekshitha/qorc-sdk/fpga-examples/incdec/pygmy.pcf'...
Loading pinmap CSV from '/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  inpad      | W          | 20         | X1Y31    | SDIOMUX  | $iopadmap$helloworldfpga.W
  inpad      | X          | 37         | X26Y32   | BIDIR    | $iopadmap$helloworldfpga.X
  inpad      | Y          | 36         | X28Y32   | BIDIR    | $iopadmap$helloworldfpga.Y
  inpad      | Z          | 61         | X20Y3    | BIDIR    | $iopadmap$helloworldfpga.Z
  outpad     | a          | 16         | X3Y29    | SDIOMUX  | $iopadmap$helloworldfpga.a
  outpad     | b          | 21         | X2Y31    | SDIOMUX  | $iopadmap$helloworldfpga.b
  outpad     | c          | 42         | X32Y32   | BIDIR    | $iopadmap$helloworldfpga.c
  outpad     | d          | 38         | X30Y32   | BIDIR    | $iopadmap$helloworldfpga.d
  outpad     | e          | 60         | X22Y3    | BIDIR    | $iopadmap$helloworldfpga.e
  outpad     | f          | 39         | X24Y32   | BIDIR    | $iopadmap$helloworldfpga.f
  outpad     | g          | 34         | X22Y32   | BIDIR    | $iopadmap$helloworldfpga.g

6. Executing Verilog backend.
Dumping module `\helloworldfpga'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
No more expansions possible.

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template $paramod$5fc0ba461eaf6037b592e258b38d2018713ea817\inpad for cells of type inpad.
Using template $paramod$f5daf5da90f21c5bda92fdff65c455b33f449aa8\inpad for cells of type inpad.
Using template $paramod$982ff93d743c8d80be37c4baf5ddbb155e9c2e84\inpad for cells of type inpad.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\inpad for cells of type inpad.
Using template $paramod$5889d4b459fc53789505bcda48d8ca809f100a73\LUT4 for cells of type LUT4.
Using template $paramod$c3282e3eab8c3eb4c8b0da8a0e74df208804655b\outpad for cells of type outpad.
Using template $paramod$36796efcfe8a67421ab19810a3b8c0e463e3d433\LUT4 for cells of type LUT4.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$5c5ff20706a16de24dba596c7bb8b30cc9c91b9d\LUT4 for cells of type LUT4.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$c61b0c605787b971c996eda33c5451956ed41feb\LUT4 for cells of type LUT4.
Using template $paramod$5b9e7b43709c63157e375124a8cadf61254db805\outpad for cells of type outpad.
Using template $paramod$5439f95b730483be4c800922bcebe9a105e90f4d\LUT4 for cells of type LUT4.
Using template $paramod$ced1dbc4c11023a68e131ea64fe9af6087a9a2a9\LUT4 for cells of type LUT4.
Using template $paramod$5a31afc5f079dd711e1e3beab38ec1beb1a386de\outpad for cells of type outpad.
Using template $paramod$047a08576b66bebd3f0a77bf04544e79098a9c6b\outpad for cells of type outpad.
Using template $paramod$c50629772bb8827234fdc3e9ca2a8ac7a0f84632\outpad for cells of type outpad.
Using template $paramod$ef1a7edb200c1b1534825302234a1d0bce5a3341\outpad for cells of type outpad.
No more expansions possible.

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 26 unused wires.

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== helloworldfpga ===

   Number of wires:                136
   Number of wire bits:            136
   Number of public wires:         129
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     BIDIR_CELL                      8
     C_FRAG                          6
     SDIOMUX_CELL                    3
     T_FRAG                          1

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\helloworldfpga'.

Warnings: 15 unique messages, 18 total
End of script. Logfile hash: 77b793c614, CPU: user 3.84s system 0.13s, MEM: 271.11 MB peak
Yosys 0.9+2406 (git sha1 9ac3484, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/anaconda3/conda-bld/yosys_1607410735049/work=/usr/local/src/conda/yosys-0.8.0_0003_e80fb742f_20201208_122808 -fdebug-prefix-map=/home/deekshitha/qorc-sdk/fpga_toolchain_install/v1.3.1/conda=/usr/local/src/conda-prefix -fPIC -Os)
Time spent: 73% 18x read_verilog (2 sec), 6% 17x opt_clean (0 sec), ...
